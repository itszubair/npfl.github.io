@mixin calc($property, $expression) {
    #{$property}: -moz-calc(#{$expression}); #{$property}: -webkit-calc(#{$expression}); #{$property}: calc(#{$expression});
}
@mixin box-sizing($expression) {
    box-sizing: #{$expression}; -moz-box-sizing: #{$expression}; -webkit-box-sizing: #{$expression};
}
@mixin transform($expression) {
    transform: #{$expression}; -moz-transform: #{$expression}; -webkit-transform: #{$expression};
}
@mixin transition($expression) {
    transition: #{$expression}; -moz-transition: #{$expression}; -webkit-transition: #{$expression};
}
@mixin linear-gradient($color1, $color2) {
    background: linear-gradient($color1, $color2);
    background: -webkit-linear-gradient($color1, $color2);
    background: -moz-linear-gradient($color1, $color2);
}
@mixin sameValue($properties-list, $val) {
    $list: $properties-list;
    @each $item in $list {
        #{$item}: $val;
    }
}
@mixin skew($x, $y) {
    -webkit-transform: skew($x, $y);
    -moz-transform: skew($x, $y);
    -ms-transform: skew($x, $y);
    -o-transform: skew($x, $y);
    transform: skew($x, $y);
}
@mixin filters($expression) {
    filter:#{$expression}; -moz-filter: #{$expression}; -webkit-filter: #{$expression}; -ms-filter: #{$expression};
}
@mixin dimentions($ww, $hh) {
    width: $ww; height: $hh;
}
@mixin mq($query) {
    @media screen and (#{$query}) {
        @content;
    }
}
// center vertically and/or horizontally an absolute positioned element
@mixin transform($transforms) {
    -moz-transform: $transforms;
    -o-transform: $transforms;
    -ms-transform: $transforms;
    -webkit-transform: $transforms;
    transform: $transforms;
}

@mixin center($xy:xy) {
    @if $xy == xy {
        position: absolute;
        left: 50%;
        top: 50%;
        bottom: auto;
        right: auto;
        @include transform(translateX(-50%) translateY(-50%));
    }
    @else if $xy == x {
        left: 50%;
        right: auto;
        @include transform(translateX(-50%));
    }
    @else if $xy == y {
        top: 50%;
        bottom: auto;
        @include transform(translateY(-50%));
    }
}

@mixin transition($property: all, $time: 0.3s, $method: linear, $delay: 0s) {
    -webkit-transition: $property $time $method $delay;
    -moz-transition: $property $time $method $delay;
    -ms-transition: $property $time $method $delay;
    -o-transition: $property $time $method $delay;
    transition: $property $time $method $delay;
}

@mixin no-transition() {
    -webkit-transition: none !important;
    -moz-transition: none !important;
    -ms-transition: none !important;
    -o-transition: none !important;
    transition: none !important;
}

@mixin animation ($delay) {
    -webkit-animation-delay: $delay;
    -moz-animation-delay: $delay;
    -o-animation-delay: $delay;
    animation-delay: $delay;
}


@mixin transition-delay($delay) {
    -moz-transition-delay:$delay;
    -o-transition-delay:$delay;
    -webkit-transition-delay: $delay;
    transition-delay:$delay;
}
@mixin x-appearance {
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
}
@mixin input-placeholder {
    &.placeholder { @content; }
    &:-moz-placeholder { @content; }
    &::-moz-placeholder { @content; }
    &:-ms-input-placeholder { @content; }
    &::-webkit-input-placeholder { @content; } 
}

@mixin text-truncate {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

@function calculateRem($size) {
    $remSize: $size / 16px;
    @return $remSize * 1rem;
}
@mixin font-size($size) {
    font-size: $size;
    font-size: calculateRem($size);
}
@mixin keyframes($animationName) {
    @-webkit-keyframes #{$animationName} {
        @content;
    }
    @-moz-keyframes #{$animationName} {
        @content;
    }
    @-o-keyframes #{$animationName} {
        @content;
    }
    @keyframes #{$animationName} {
        @content;
    }
}

@mixin opacity($opacity) {
    opacity: $opacity;
    $opacity-ie: $opacity * 100;
    filter:alpha(opacity=$opacity-ie); //IE8
}
// This can be stored globally and can be pulled in by the mixin
$breakpoints: ( 'tiny': ( max-width: 575px ), 'tiny-inverse': ( min-width: 576px ), 'small': ( max-width: 767px ), 'small-inverse': ( min-width: 768px ), 'medium': ( max-width: 991px ), 'medium-inverse': ( min-width: 992px ), 'large': ( max-width: 1199px ), 'large-inverse': ( min-width: 1200px ), 'xlarge': ( max-width: 1280px ) );
// Creating the mixin
@mixin breakpoint($name) {
    @if map-has-key($breakpoints, $name) {
        @media #{inspect(map-get($breakpoints, $name))} {
            @content;
        }
    }
    @else {
        @warn "Couldn't find a your breakpoint named `#{$name}`.";
    }
}

// breakpoints

$S:     480px;   
$M:     768px;         

// media queries

@mixin MQ($canvas) {
    @if $canvas == S {
        @media only screen and (min-width: $S) { @content; } 
    }
    @else if $canvas == M {
        @media only screen and (min-width: $M) { @content; } 
    }
}

// super light grid - it works with the .cd-container class inside style.scss

@mixin column($percentage, $float-direction:left) {
    width: 100% * $percentage;
    float: $float-direction;
}

@mixin font-smoothing {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}
@mixin gradient-horizontal($direction:left, $start-color: $color-black, $end-color: $color-black, $start-percent: 0%, $end-percent: 100%) {
    background: -webkit-linear-gradient($direction, $start-color $start-percent, $end-color $end-percent); // Safari 5.1-6, Chrome 10+
    background: -o-linear-gradient($direction, $start-color $start-percent, $end-color $end-percent); // Opera 12
    background: linear-gradient($direction, $start-color $start-percent, $end-color $end-percent); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=1); // IE9 and down
}

// Vertical gradient, from top to bottom
//
// Creates two color stops, start and end, by specifying a color and position for each color stop.
// Color stops are not available in IE9 and below.
@mixin gradient-vertical($start-color: transparent, $end-color: $color-black, $start-percent: 0%, $end-percent: 100%) {
    background: -webkit-linear-gradient(top, $start-color $start-percent, $end-color $end-percent);  // Safari 5.1-6, Chrome 10+
    background: -o-linear-gradient(top, $start-color $start-percent, $end-color $end-percent);  // Opera 12
    background: linear-gradient(to bottom, $start-color $start-percent, $end-color $end-percent); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=0); // IE9 and down
}
// --------------------------------------------------
// Flexbox SASS mixins
// The spec: http://www.w3.org/TR/css3-flexbox
// --------------------------------------------------

// Flexbox display
@mixin flexbox() {
    display: -webkit-box;
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
}

// The 'flex' shorthand
// - applies to: flex items
// <positive-number>, initial, auto, or none
@mixin flex($values) {
    -webkit-box-flex: $values;
    -moz-box-flex: $values;
    -webkit-flex: $values;
    -ms-flex: $values;
    flex: $values;
}

// Flex Flow Direction
// - applies to: flex containers
// row | row-reverse | column | column-reverse
@mixin flex-direction($direction) {
    -webkit-flex-direction: $direction;
    -moz-flex-direction: $direction;
    -ms-flex-direction: $direction;
    flex-direction: $direction;
}

// Flex Line Wrapping
// - applies to: flex containers
// nowrap | wrap | wrap-reverse
@mixin flex-wrap($wrap) {
    -webkit-flex-wrap: $wrap;
    -moz-flex-wrap: $wrap;
    -ms-flex-wrap: $wrap;
    flex-wrap: $wrap;
}

// Flex Direction and Wrap
// - applies to: flex containers
// <flex-direction> || <flex-wrap>
@mixin flex-flow($flow) {
    -webkit-flex-flow: $flow;
    -moz-flex-flow: $flow;
    -ms-flex-flow: $flow;
    flex-flow: $flow;
}

// Display Order
// - applies to: flex items
// <integer>
@mixin order($val) {
    -webkit-box-ordinal-group: $val;  
    -moz-box-ordinal-group: $val;     
    -ms-flex-order: $val;     
    -webkit-order: $val;  
    order: $val;
}

// Flex grow factor
// - applies to: flex items
// <number>
@mixin flex-grow($grow) {
    -webkit-flex-grow: $grow;
    -moz-flex-grow: $grow;
    -ms-flex-grow: $grow;
    flex-grow: $grow;
}

// Flex shrink
// - applies to: flex item shrink factor
// <number> 
@mixin flex-shrink($shrink) {
    -webkit-flex-shrink: $shrink;
    -moz-flex-shrink: $shrink;
    -ms-flex-shrink: $shrink;
    flex-shrink: $shrink;
}

// Flex basis
// - the initial main size of the flex item
// - applies to: flex itemsnitial main size of the flex item
// <width> 
@mixin flex-basis($width) {
    -webkit-flex-basis: $width;
    -moz-flex-basis: $width;
    -ms-flex-basis: $width;
    flex-basis: $width;
}

// Axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | space-between | space-around 
@mixin justify-content($justify) {
    -webkit-justify-content: $justify;
    -moz-justify-content: $justify;
    -ms-justify-content: $justify;
    justify-content: $justify;
    -ms-flex-pack: $justify;
}

// Packing Flex Lines
// - applies to: multi-line flex containers
// flex-start | flex-end | center | space-between | space-around | stretch 
@mixin align-content($align) {
    -webkit-align-content: $align;
    -moz-align-content: $align;
    -ms-align-content: $align;
    align-content: $align;
}

// Cross-axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | baseline | stretch 
@mixin align-items($align) {
    -webkit-align-items: $align;
    -moz-align-items: $align;
    -ms-align-items: $align;
    align-items: $align;
}

// Cross-axis Alignment
// - applies to: flex items
// auto | flex-start | flex-end | center | baseline | stretch 
@mixin align-self($align) {
    -webkit-align-self: $align;
    -moz-align-self: $align;
    -ms-align-self: $align;
    align-self: $align;
}